In the file racket/contract/private/arrow-val-first, on line 785 is
this cond clause:

    [(and (pair? regular-doms)
          (null? (cdr regular-doms))
          (any/c? (car regular-doms))
          (null? kwd-infos)
          (not rest-ctc)
          (not pre-cond)
          (not post-cond)
          (pair? rngs)
          (null? (cdr rngs))
          (flat-contract? (car rngs))
          (eq? boolean? (flat-contract-predicate (car rngs))))
     any/c->boolean-contract]

That is inside the implementation of -> and it is doing the checks to
see if the given contract accepts only single arity functions and that
the result contract is boolean?, in which case it returns a
specialized predicate contract that has some optimizations in it.

You could add a clause like this, just above (or below) it:

    [(and (null? kwd-infos)
          (not rest-ctc)
          (not pre-cond)
          (not post-cond)
          (pair? rngs)
          (null? (cdr rngs)))
     christophes-contract]

that would be triggered for any contract like (-> a b c d) where
regular-doms will be the (list a b c) and rngs will be (list d).

Or you could check that regular-doms was a list of length 1 and then
you would be good.

As for building Racket, once you have it built the first time, then
the program "raco setup" is what you use to rebuild. It uses the
contract system itself (like everything does) but it has smarts about
bootstrapping so that it will be able to cope with changing the
contract system's implementation.

You should be able to speed things up a bit by compiling only a part
of the system, something like:

   raco setup racket syntax

will get you to the point that a file like:

#lang racket/base
(require racket/contract)
(-> integer? integer?)

works again.

Also, a related issue: the "open require path" menu item in DrRacket
lets you specify a different racket installation from which to open
files. It requires only a minimally working racket binary to be able
to find the other files.

And multiple installations of racket on your filesystem is totally
fine. I typically keep two that I'm using at once. It is helpful for
check syntax if they are at the same version number so I generally
rebuild daily and rebuild them both at once.

Let me know if you run into any issues!

This is the repo to fork: https://github.com/racket/racket

Building should just be "git clone ...; cd racket; make". After that,
racket/bin/racket will be the racket binary for that file. And then
you can build another one in a parallel directory. Break one with
contract system changes and use the other one's DrRacket.
